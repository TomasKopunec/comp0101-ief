#!/bin/env python3
import sys
import yaml
import matplotlib.pyplot as plt
import os

def plot_values(x_values, y_values, filename, graph_title, x_axis_label, y_axis_label, colour, graph_type='bar'):
    """
    This function plots a graph based on the provided x and y values, saves it to a file, and supports different types of graphs.
    
    Parameters:
    - x_values: List of x-axis values.
    - y_values: List of y-axis values.
    - filename: Name of the file to save the plot.
    - graph_title: Title of the graph.
    - x_axis_label: Label for the x-axis.
    - y_axis_label: Label for the y-axis.
    - colour: Colour of the plot elements.
    - graph_type: Type of graph ('bar', 'line', 'scatter'). Default is 'bar'.
    
    The function sorts the x and y values based on y values, creates a matplotlib plot, and saves the plot to the specified filename.
    """
    if len(x_values) != len(y_values):
        raise ValueError("x_values and y_values must have the same length.")

    # Sorting the values based on y_values for consistent plotting
    sorted_pairs = sorted(zip(x_values, y_values), key=lambda pair: pair[1])
    sorted_x_values, sorted_y_values = zip(*sorted_pairs)

    plt.figure(figsize=(10, 6))
    plot_function = {'bar': plt.bar, 'line': plt.plot, 'scatter': plt.scatter}
    if graph_type in plot_function:
        plot_function[graph_type](sorted_x_values, sorted_y_values, color=colour)
    else:
        raise ValueError(f"Unsupported graph type: {graph_type}")

    plt.title(graph_title)
    plt.xlabel(x_axis_label)
    plt.ylabel(y_axis_label)
    plt.xticks(rotation=45, ha='right')
    plt.tight_layout()
    plt.savefig(filename)



# Reading YAML input from stdin
yaml_input = ''.join(sys.stdin.readlines())
try:
    data = yaml.safe_load(yaml_input)[0]
    if not data:
        raise ValueError("YAML input is empty or invalid.")

    required_params = ['plotted_points', 'x_name', 'y_name']
    for param in required_params:
        if param not in data:
            raise KeyError(f"Required parameter '{param}' is missing.")

    x_labels = data['x_name']
    y_label = data['y_name']
    plot_dict = data.get('plotted_points', [])

    
    # Setting default values for optional parameters
    colour = data.get('colour', 'skyblue')
    x_axis_name = data.get('x_axis_name', '_'.join(x_labels))
    y_axis_name = data.get('y_axis_name', y_label)
    diagram_name = data.get('diagram_name', 'combinations_diagram')
    diagram_title = data.get('diagram_title', f'{x_axis_name} vs {y_axis_name}')
    graph_type = data.get('graph_type', 'bar')

    #create the x and y lists for the diagram based on the x_labels and y_label
    x, y = [], []
    for item in plot_dict:
        x_value = "_".join(str(item.get(label, '')) for label in x_labels).rstrip('_')
        if not x_value:
            raise KeyError(f"Missing one of the required x_name keys in plotted_values: {x_labels}")
        y_value = item.get(y_label)
        if y_value is None:
            raise KeyError(f"Missing the required y_name key in plotted_values: {y_label}")
        x.append(x_value)
        y.append(y_value)

    
        
    
    #plot the diagram
    plot_values(x, y, diagram_name, diagram_title, x_axis_name, y_axis_name, colour, graph_type)

    #set the path of the diagram in the ompl file
    current_path = os.getcwd()
    data['diagram'] = current_path + "/"+diagram_name+".png"        
    print(data)
        
except yaml.YAMLError as e:
    print("Error parsing YAML:", e)